  class MainApp
  {
    static void Main()
    {
      Composite root = new Composite("root");
 
      root.Add(new Leaf("Leaf A"));
      root.Add(new Leaf("Leaf B"));
 
      Composite comp = new Composite("Composite X");
 
      comp.Add(new Leaf("Leaf XA"));
      comp.Add(new Leaf("Leaf XB"));
      root.Add(comp);
      root.Add(new Leaf("Leaf C"));
 
      Leaf leaf = new Leaf("Leaf D");
      root.Add(leaf);
      root.Remove(leaf);
 
      root.Display(1);
 
      Console.Read();
    }
  }

  abstract class Component
  {
    protected string name;
 
    public Component(string name)
    {
      this.name = name;
    }

    public abstract void Display(int depth);
  }
 
  class Composite : Component
  {
    private List<Component> children = new List<Component>();
 
    // Constructor
    public Composite(string name) : base(name)
    {  
    }
 
    public void Add(Component component)
    {
      children.Add(component);
    }
 
    public void Remove(Component component)
    {
      children.Remove(component);
    }
 
    public override void Display(int depth)
    {
      Console.WriteLine(new String('-', depth) + name);
 
      foreach (Component component in children)
      {
        component.Display(depth + 2);
      }
    }
  }
 

  class Leaf : Component
  {
    public Leaf(string name) : base(name)
    {  
    }
 
    public override void Display(int depth)
    {
      Console.WriteLine(new String('-', depth) + name);
    }
  }